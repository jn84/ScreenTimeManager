@using Microsoft.Web.Mvc
@using ScreenTimeManager.Helpers
@using ScreenTimeManager.Models
@model ScreenTimeManager.Models.TimeSubmission

@{
    Layout = null;
}

@* Reminder: ViewBag has the rule needed it to build this modal. ViewBag.Rule *@

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <p class="modal-title" id="myModalLabel">Confirm Screen Time Change</p>
</div>

@if (Model == null) // TODO: DEBUG CODE
{
    throw new NullReferenceException();
}

@using (Html.BeginForm(ViewContext.RouteData.GetRequiredString("action"), "RuleBases", null, FormMethod.Post, new {id = "modalForm"}))
{
    <div class="modal-body">

        @Html.AntiForgeryToken()
        <p>
            <strong>@ViewBag.Rule.RuleTitle</strong>
        </p>
        <p>@ViewBag.Rule.RuleDescription</p>

        <hr/>

        @Html.HiddenFor(model => model.RuleBaseId, new {@class = "modal-input"})
        @Html.HiddenFor(model => model.User, new { Value = User.Identity.Name })

        <div >
            <div>
                @Html.EditorFor(model => model.Hours, new { htmlAttributes = new {@class = "modal-input", min = 0, max = 23, id = "hours-applied"}})
                @Html.LabelFor(model => model.Hours, new {@class = "control-label"})
            </div>
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.Hours, "", new {@class = "validation-error-text"})
            </div>
        </div>
        <div >
            <div>
                @Html.EditorFor(model => model.Minutes, new {htmlAttributes = new {@class = "modal-input", min = 0, max = 59, id = "minutes-applied"}})
                @Html.LabelFor(model => model.Minutes, new {@class = "control-label"})
            </div>
            <div class="validation-message">
                @Html.ValidationMessageFor(model => model.Minutes, "", new {@class = "validation-error-text"})
            </div>
        </div>
        <div >
            <p>Comment</p>
            <div>
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new {@class = "note-text-area", placeholder = "Enter a comment (not required)"}})
            </div>
            @Html.ValidationMessageFor(model => model.Note, "", new {@class = "validation-error-text"})
        </div>

        <hr/>

        @Html.Partial("_PendingTime", (RuleBase) ViewBag.Rule)

    </div>

    <div class="modal-footer">
        <div class="button-container">
            <button class="cancel-apply" type="button" data-dismiss="modal">Cancel</button>
        </div>

        @*Apparently, any helpers from ButtonsAndLinksExtensions cannot be used in a security conscious view/environment :(*@
        <div class="button-container">
            @if (User.IsInRole("Admin") || User.IsInRole("Parent"))
            {
                <button class="confirm-apply" type="submit" id="modal-submit">Apply Rule</button>
}
            else if (User.IsInRole("Child"))
            {
                <button class="confirm-apply" type="submit" id="modal-submit">Submit Request</button>
}
        </div>

    </div>
}